set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
" =====================================================
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'tpope/vim-markdown'
" Plugin 'tpope/vim-commentary'
Plugin 'tomtom/tcomment_vim'

Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-fugitive'
Plugin 'kien/ctrlp.vim'
Plugin 'vim-scripts/The-NERD-tree'
Plugin 'myusuf3/numbers.vim'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'epeli/slimux'
" Plugin 'benmills/vimux'
" Powerline should not be run from vundle AND pip simultaneously
" Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}

Plugin 'altercation/vim-colors-solarized'
Plugin 'croaky/vim-colors-github'
Plugin 'daylerees/colour-schemes', { 'rtp': 'vim/' }
Plugin 'tomasr/molokai'

" work with csv files
Plugin 'vim-scripts/csv.vim'

" directly work with databases
Plugin 'vim-scripts/dbext.vim'
Plugin 'vim-scripts/ZoomWin.vim'

" send text from vim to running tmux session
" Plugin 'viershay/tslime.vim'
" Plugin 'ervandew/screen'

" Vitality - iTerm and tmux integration
" - fix cursor within iTerm
" - fix focus behaviour
Plugin 'sjl/vitality.vim'


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" =========================================

set backspace=2   " Backspace deletes like most programs in insert mode
set nobackup
set nowritebackup
set noswapfile    " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set history=50
set ruler         " show the cursor position all the time
set showcmd       " display incomplete commands
set incsearch     " do incremental searching
set laststatus=2  " Always display the status line
set autowrite     " Automatically :write before running commands

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab

" Display extra whitespace
set list listchars=tab:»·,trail:·

" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1

" Numbers
" need to set this on as well as relative line numbers
" if you are using the numbers.vim package to toggle
set number " standard numbers
" To switch on this feature enter the command “:set rnu”
" and to switch off this feature enter the command “:set nornu”
set rnu " relative line numbers
set numberwidth=5

set showbreak=↪
let NERDTreeShowHidden=1

" source the vimrc file after saving it. This way, you don't have to reload Vim to see the changes.
" http://www.bestofvim.com/tip/auto-reload-your-vimrc/
augroup reload_vimrc " {
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }


augroup vimrcEx
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  "
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile *.md set filetype=markdown

  " Enable spellchecking for Markdown
  autocmd FileType markdown setlocal spell

  " Automatically wrap at 80 characters for Markdown
  autocmd BufRead,BufNewFile *.md setlocal textwidth=80

augroup END

" Configure the cursor so that it changes shape in insert mode
" http://vim.wikia.com/wiki/Configuring_the_cursor
if &term =~ '^xterm'
  " solid underscore
  let &t_SI .= "\<Esc>[4 q"
  " solid block
  let &t_EI .= "\<Esc>[2 q"
  " 1 or 0 -> blinking block
  " 3 -> blinking underscore
  " Recent versions of xterm (282 or above) also support
  " 5 -> blinking vertical bar
  " 6 -> solid vertical bar
endif

" Tab completion
" ==============
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>

" Color scheme etc
" ================
" getting colors to work inside tmux
set t_Co=256
" Color scheme

" colorscheme railscasts.vim

" colorscheme github
" highlight NonText guibg=#060606
" highlight Folded  guibg=#0A0A0A guifg=#9090D0

" Dayle-Rees colorschemes: Halflife tron
" colorscheme halflife

" set background=dark
" colorscheme solarized

let g:rehash256 = 1
colorscheme molokai

" remap keys
" ==========
let mapleader = " " " i.e. if you type <space> in normal mode then any key after that 
inoremap jj <ESC>
map <F2> :NERDTreeToggle<CR>
map <F5> :SlimuxREPLSendSelection<CR>
map <F6> :SlimuxREPLSendLine<CR>

" Specific plugin set-up
" ======================
" dbext set-up
let g:dbext_default_profile_spotid = 'type=MYSQL:host=localhost:user=stevetm:dbname=spotid'

" comments
" define standard new line comment in stata
call tcomment#DefineType('stata', '* %s')

" Latest commands
" ===============
" Attempts to stop the annoying 
set dir=$TEMP
" https://github.com/spf13/spf13-vim/issues/540
set shortmess=at
set cmdheight=2

" Share the vim and the system clipboard
set clipboard=unnamed
" http://superuser.com/questions/238362/enable-mouse-for-scrolling-only-in-vim-in-iterm-macosx
set mouse=a

" save these commands to the end
" ==============================
" http://stackoverflow.com/questions/5602767/why-is-vim-not-detecting-my-coffescript-filetype#5602813
filetype off
filetype plugin indent on

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
  set hlsearch
endif

