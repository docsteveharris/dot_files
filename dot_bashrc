# 120807
# Steve Harris
# Non-log-in bash script
#  ============================
#  = here is a comment banner =
#  ============================



# NB: I have symlinked .profile to .bashrc so the log-in and the non-login scripts are identical

export MYHELLO="OK: Running .bashrc"
# echo $MYHELLO
# echo "OK: Current path: " $PATH
# echo "OK: Set the path"

# Use vi bindings, should enter insert mode by default
set -o vi

export PATH=/users/steve/code/scripts:$PATH

# cd to the path of the front Finder window
# http://brettterpstra.com/2013/02/09/quick-tip-jumping-to-the-finder-location-in-terminal/
# type cdf in the shell to cd to the front most finder window
cdf() {
	target=`osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
	if [ "$target" != "" ]; then
		cd "$target"; pwd
	else
		echo 'No Finder window found' >&2
	fi
}
# and reverse type f to open finder at the current shell dir
alias f='open -a Finder ./'
# long list with
# option h: size in KB,MB etc
# option u: sort by last access time
# option r: reverse sort order
# option o: group id
alias ll='ls -laGhuro'


# Saves you having to type ./ before you try and run a file in pwd
export PATH=./:$PATH
# Add my scripts folder to the Path
export PATH=/Users/steve/usr/scripts:$PATH

# needed for homebrew?
export PATH=/usr/local/bin:$PATH # CHANGED: 2013-10-30 - also needed for node.js
export PATH=/usr/local/share:$PATH
export PATH=/usr/local/git/bin:$PATH

# PYTHON
# NOTE: 2013-11-16 - changed all references to 2.7 site packages

# https://github.com/mxcl/homebrew/wiki/Homebrew-and-Python
# specifically for python via homebrew because packages otherwise installed in the system version
# export PYTHONPATH=/usr/local/share/python:$PATH # homebrew standard
# export PYTHONPATH=/Users/steve/VirtualEnvs/mypy3/lib/python3.3/site-packages:$PYTHONPATH
# export PYTHONPATH=/Users/steve/.virtualenvs/mypy/lib/python2.7/site-packages:$PYTHONPATH


# PYTHONPATH
# see http://docs.python.org/using/cmdline.html#envvar-PYTHONPATH
# export PYTHONPATH=/usr/local/lib/python2.7/site-packages:$PYTHONPATH
# export PYTHONPATH=/usr/local/lib/python2.7/site-packages:$PYTHONPATH
export PYTHONPATH=/Users/steve/usr/local/lib:$PYTHONPATH


# store symlinks to specific binaries  (e.g. sublime text)
export PATH=~/usr/bin:$PATH
# add stataMP console version (batch jobs etc) to the path
export PATH=/Applications/Stata/StataMP.app/Contents/MacOS:$PATH
alias stata='/Applications/Stata/StataMP.app/Contents/MacOS/stata-mp -q'
# add stataMP GUI to the path
export PATH=/Applications/Stata/Stata.app/Contents/MacOS:$PATH
# my library files
export PATH=~/usr/local/lib:$PATH
# add R 32-bit to the path
export PATH=/Applications/R.app/Contents/MacOS:$PATH
# add R 64-bit to the path
export PATH=/Applications/R64.app/Contents/MacOS:$PATH
# echo "OK: New path" $PATH
# MySQL - add to pATH
export PATH=/usr/local/mysql/bin:$PATH
# start mysql server
# mysql.server start
export TEXINPUTS="/Users/steve/usr/local/lib"

# 140102 python virtual environments
# http://virtualenvwrapper.readthedocs.org/en/latest/install.html
# export WORKON_HOME=$HOME/.virtualenvs
# export PROJECT_HOME=$HOME/Devel
# source /usr/local/bin/virtualenvwrapper.sh

# START
# http://www.insomnihack.com/?p=442
# The first couple of sections set up the Terminal for bash completion and virtualenvwrapper commands. The third section sets up my virtualenv aliases: one for the default system python, one for Python 2.7, one for Python 2.7 and PyQt, and another for Python 3.2. Python 3 support was added to virtualenv in version 1.6, so you no longer need to jump through hoops to get it working with Pythyon 2.x.
# virtualenvwrapper
# export WORKON_HOME=$HOME/VirtualEnvs
# if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
#     source /usr/local/bin/virtualenvwrapper.sh
# fi

# bash completion
if [ -f `brew --prefix`/etc/bash_completion ]; then
     . `brew --prefix`/etc/bash_completion
fi

# # Python 2.6.1
# alias mkve26='mkvirtualenv --no-site-packages'
# # Python 2.7.1
# alias mkve='mkvirtualenv --no-site-packages --python=/usr/local/Cellar/python/2.7.1/bin/python'
# alias mkveqt='mkvirtualenv --python=/usr/local/Cellar/python/2.7.1/bin/python'
# alias designer='open /usr/local/Cellar/qt/4.7.2/bin/Designer.app'
# # Python 3.2
# alias mkve3='mkvirtualenv --no-site-packages --python=/usr/local/Cellar/python3/3.3.2/bin/python3'

# Ammend python path for Homebrew PyQt
# export PYTHONPATH=/usr/local/lib/python:$PYTHONPATH
# END
# workon mypy3

# # http://hackercodex.com/guide/python-development-environment-on-mac-osx/
# # pip should only run if there is a virtualenv currently activated
# export PIP_REQUIRE_VIRTUALENV=true
# # cache pip-installed packages to avoid re-downloading
# export PIP_DOWNLOAD_CACHE=$HOME/.pip/cache
# # Above stops pip install unless in virtual env
# # Below overides that so you would now tyoe ...
# # syspip install --upgrade pip setuptools virtualenv
# syspip(){
#    PIP_REQUIRE_VIRTUALENV="" pip "$@"
# }

# NOTE: 2014-01-02 - commenting out below and moving to implementation above
# # Python virtual environments
# # NOTE: 2012-08-07 - http://virtualenvwrapper.readthedocs.org/en/latest/install.html#shell-startup-file
# # edited since virtualenvrwrapper.sh is in /usr/local/share/python/virtualenvwrapper.sh
# export WORKON_HOME=$HOME/.virtualenvs
# export PROJECT_HOME=$HOME/Devel
# # source /usr/local/share/python/virtualenvwrapper.sh
# # workon mypy

# # NOTE: 2012-08-07 - http://stackoverflow.com/questions/8574919/sublime-text-2-custom-path-and-pythonpath
# # Make the above settings system wide
# launchctl setenv PATH $PATH
# launchctl setenv PYTHONPATH $PYTHONPATH

# Latex installation
export PATH=/usr/local/texlive/2012/bin/x86_64-darwin:$PATH

# Shorten the prompt
# http://osxdaily.com/2006/12/11/how-to-customize-your-terminal-prompt/
export PS1="\u:\W$"

. /Users/steve/usr/github/z/z.sh
# Script for navigating around in terminal
# http://jeroenjanssens.com/2013/08/16/quickly-navigate-your-filesystem-from-the-command-line.html
export MARKPATH=$HOME/.marks
function jump {
    cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}
function mark {
    mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}
function unmark {
    rm -i "$MARKPATH/$1"
}
function marks {
    \ls -l "$MARKPATH" | tail -n +2 | sed 's/  / /g' | cut -d' ' -f9- | awk -F ' -> ' '{printf "%-10s -> %s\n", $1, $2}'
}function marks {
    \ls -l "$MARKPATH" | tail -n +2 | sed 's/  / /g' | cut -d' ' -f9- | awk -F ' -> ' '{printf "%-10s -> %s\n", $1, $2}'
}


# Timing app - tracking
PROMPT_TITLE='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/~}\007"'
export PROMPT_COMMAND="${PROMPT_COMMAND} ${PROMPT_TITLE}; "




# Added by Canopy installer on 2014-03-13
# VIRTUAL_ENV_DISABLE_PROMPT can be set to '' to make bashprompt show that Canopy is active, otherwise 1
VIRTUAL_ENV_DISABLE_PROMPT=1 source /Users/steve/canopy/bin/activate

# Added by Canopy installer on 2014-03-13
# VIRTUAL_ENV_DISABLE_PROMPT can be set to '' to make bashprompt show that Canopy is active, otherwise 1
# VIRTUAL_ENV_DISABLE_PROMPT=1 source /Users/steve/Library/Enthought/Canopy_64bit/User/bin/activate

source /Users/steve/.iterm2_shell_integration.bash
